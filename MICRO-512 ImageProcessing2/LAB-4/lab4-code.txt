import ij.IJ;

public class Code {

	public ImageAccess gradientX(ImageAccess in) {
		double sigma = 1/Math.sqrt(2);
        int L = (2*(int)Math.ceil(sigma*3))+1;//in this special case, L should be 7
        ImageAccess out = new ImageAccess(in.nx, in.ny);

        //convolution
        
        for(int i=0;i<out.nx;i++)
        {
            for(int j=0;j<out.ny;j++)
            {
                double value = 0.0;
				double gradient = 0.0;
				double[][] neighbor = out.getNeighborhood(i,j,L,L);
                for(int x=-L;x<=L;x++)
				{
					for(int y=-L;y<=L;y++)
					{
						gradient = (-2*x/Math.PI)*Math.exp(-1*(x^2+y^2));
						value+=neighbor[x+L][y+L]*gradient;
					}
				}
				out.putPixel(i,j,value);
            }
        }
		return out;
	}
	
	public ImageAccess gradientY(ImageAccess in) {
		double sigma = 1/Math.sqrt(2);
        int L = (2*(int)Math.ceil(sigma*3))+1;//in this special case, L should be 7
        ImageAccess out = new ImageAccess(in.nx, in.ny);

        //convolution
        
        for(int i=0;i<out.nx;i++)
        {
            for(int j=0;j<out.ny;j++)
            {
                double value = 0.0;
				double gradient = 0.0;
				double[][] neighbor = out.getNeighborhood(i,j,L,L);
                for(int x=-L;x<=L;x++)
				{
					for(int y=-L;y<=L;y++)
					{
						gradient = (-2*y/Math.PI)*Math.exp(-1*(x*x+y*y));
						value+=neighbor[x+L][y+L]*gradient;
					}
				}
				out.putPixel(i,j,value);
            }
        }		
		return out;
	}

	public ImageAccess smoothing(ImageAccess in, double sigma) {
		double poles[] = new double[3];
		int N = 3;
		double a = 1+N/(sigma*sigma)-Math.sqrt(N*N+2*N*sigma*sigma)/(sigma*sigma);
		poles[0] = poles[1] = poles[2] = a;

		for(int i=0;i<in.nx;i++)
		{
			double[] column = in.getColumn(i);
			double[] column_out = Convolver.convolveIIR(column,poles);
			in.putColumn(i,column_out);
		}

		for(int j=0;j<in.ny;j++)
		{
			double[] row = in.getRow(j);
			double[] row_out = Convolver.convolveIIR(row,poles);
			in.putRow(j,row_out);
		}

		return in;
	}

	public ImageAccess[] structureTensor(ImageAccess in, double sigma) {
		ImageAccess orient		= new ImageAccess(in.nx, in.ny);
		ImageAccess coherency 	= new ImageAccess(in.nx, in.ny);
		ImageAccess energy 		= new ImageAccess(in.nx, in.ny);
		ImageAccess harris 		= new ImageAccess(in.nx, in.ny);
		ImageAccess gradient_x = gradientX(in);
		ImageAccess gradient_y = gradientY(in);
		ImageAccess gradient_x_2 = gradient_x.duplicate();
		ImageAccess gradient_x_y = gradient_x.duplicate();
		ImageAccess gradient_y_2 = gradient_y.duplicate();

		gradient_x_2.multiply(graident_x);
		gradient_x_y.multiply(gradient_y);
		gradient_y_2.multiply(gradient_y);
		
		ImageAccess J_xx = smoothing(gradient_x_2,sigma);
		ImageAccess J_xy = smoothing(gradient_x_y,sigma);
		ImageAccess J_yy = smoothing(gradient_y_2,sigma);

		for(int i=0;i<in.nx;i++)
		{
			for(int j=0;j<in.ny;j++)
			{
				double energy_pixelwise = J_xx.getPixel(i,j)+J_yy.getPixel(i,j);
				orient.putPixel(i,j,0.5*Math.atan2(2*J_xy.getPixel(i,j)/(J_yy.getPixel(i,j)-J_xx.getPixel(i,j))));
				energy.putPixel(i,j,energy_pixelwise);
				if(energy_pixelwise<0.01)
				{
					coherency.putPixel(i,j,0);
				}
				else
				{
					coherency.putPixel(i,j,Math.sqrt(energy_pixelwise*energy_pixelwise+4*J_xy.getPixel(i,j)*J_xy.getPixel(i,j))/(energy_pixelwise));
				}
				harris.putPixel(i,j,J_xx.getPixel(i,j)*J_yy.getPixel(i,j)-J_yy.getPixel(i,j)*J_yy.getPixel(i,j)-0.05*energy_pixelwise*energy_pixelwise);
			}
		}

		ImageAccess features[] = new ImageAccess[] {orient, energy, coherency, harris};
		return features;
	}
	
	public void visualizeFeatures(ImageAccess in, double sigma, int mode) {
		ImageAccess[] features = structureTensor(in, sigma);
		if (mode == 1) {
			features[0].show("Orientation");
			features[1].show("Energy");
			features[2].show("Coherency");
			features[3].show("Harris");
		}
		if (mode == 2) {

			ImageAccess S = new ImageAccess(in.nx, in.ny);
			ImageAccess B = new ImageAccess(in.nx, in.ny);
			S.setConstant(255);
			B.setConstant(255);
			new ImageAccess.Display(false, features[0], S, B, "HSB 2");	
		}
		if (mode == 3) {
			ImageAccess S = features[2].duplicate();
			double max = features[2].getMaximum();
			double min = features[2].getMinimum();
			S.subtract(min);
			S.divide(max-min);
			new ImageAccess.Display(false, features[0], S, in, "HSB 3");	
		}
	}
	
	public void selectDirection(ImageAccess in, double sigma, double minOrientation, double maxOrientation) {
		ImageAccess[] features = structureTensor(in, sigma);
		ImageAccess out = in.duplicate();
		double max_energy = features[1].getMaximum();
		double min_energy = features[1].getMinimum();

		for(int i=0; i<in.nx; i++)
		{
			for(int j=0; j<in.ny; j++)
			{
				double energy = features[1].getPixel(i,j);
				double coherency = features[2].getPixel(i,j);
				double orient = features[0].getPixel(i,j);

				if(energy>0.5*max_energy&&coherency>0.5&&orient<maxOrientation&&orient>minOrientation)
				{
					//keeping these pixels
				}
				else
				{
					out.putPixel(i,j,0);
				}
			}
		}

		out.show("Output of selectDirection");
	}

	public void detectCorner(ImageAccess in, double sigma, double min, int L) {
		ImageAccess[] features = structureTensor(in, sigma);
		ImageAccess.Display display = in.show();
		for(int i=0; i<in.nx; i++)
		{
			for(int j=0; j<in.ny; j++)
			{
				double harris = features[3].getPixel(i,j);
				if(harris>min&&localMaximum(in,L,i,j)==true)
				{
					display.overlayCross(i,j,10);
				}
			}
		}
	}

	//self-defined function
	public boolean localMaximum(ImageAccess in, int L, int i, int j)
	{
		double[][] neighbor = in.getNeighborhood(i,j,L,L);
		double max = -Double.MAX_VALUE;
		int index_x = -1;
		int index_y = -1;

		for(int x=0;x<L;x++)
		{
			for(int y=0;y<L;y++)
			{
				if(neighbor[x][y]>max)
				{
					index_x = x;
					index_y = y;
					max = neighbor[x][y];
				}
			}
		}

		if((index_x == (L-1)/2)&&(index_y == (L-1)/2))
			return true;
		else
			return false;
	}
} 